load("/Users/mbbsstw3/Dropbox (Personal)/Random designs/code_neat/model-robust-new/mar3-2019-2factor-4run-linear.Rdata")
ls
ls()
answers
rawdesigns
##
#  Supporting material for "Minimax efficient random experimental designs with application to #
#	model-robust design for prediction" by T.W. Waite and D.C. Woods (2019)#
#
# Section 4: Model-robust designs#
## Section 4.3.2, first example: 3 points, 1 factors, quadratic model#
#
source("obj-funs.R")#
source("coord-descent.R")#
# set up model#
f=function(x) { c(1,x,x^2) }#
A=diag(c(4,4/3,4/5)); A[1,3] <- 4/3 -> A[3,1]#
#
# set up discretized translation set (for objective function evaluation)#
library(lhs)#
Tmc <- 2*randomLHS(n=50, k=1)-1#
#
# set up initial mean-design#
xi <- 0.8*(randomLHS(n=3, k=1)-0.5)#
#
tau2=2*1*0.01^2#
#
ans <- coord.descent(c(xi,1 ), Psi.approx.wrap, lower=rep(c(-1, 0 ), c(3, 1)), upper=rep(c(1,1),c(3,1)),  #
                     n=3, q=1, Tmc=Tmc, f=f, A=A, sigma2.UB=1, Tmax=Tmc, tau2=tau2, tol=1e-4 )#
#
plot(ans$xcurr[1:3], rep(0,3))#
# try several values of tau^2#
#
# compute optimal strategies#
tau2s <- 2*1* c(0.01, 0.05, 0.10, 0.25, 0.5, 1)^2#
answers <- list()#
rawdesigns <- list()#
for (k in 1:length(tau2s)) {#
  answers[[k]] <- coord.descent(c(xi,1 ), Psi.approx.wrap, lower=rep(c(-1, 0 ), c(3, 1)), upper=rep(c(1,1),c(3,1)),  #
                                n=3, q=1, Tmc=Tmc, f=f, A=A, sigma2.UB=1, Tmax=Tmc, tau2=tau2s[k], tol=1e-4 )#
  rawdesigns[[k]] <- design.raw(answers[[k]]$xcurr, n=3, q=1, transform.delta=T)#
}#
# plot the strategies#
plot(NULL, xlim=c(-1,1), ylim=c(1,5) ,ylab=expression(tau^2/bar(sigma)^2), xlab=expression(x),yaxt='n')#
axis(2, at=1:5, labels=tau2s[1:5])#
for( k in 1:length(tau2s)) {#
  xi.bar <- rawdesigns[[k]]$xi.bar#
  delta <- rawdesigns[[k]]$delta#
  points(x=xi.bar, y=rep(k,3), pch=19)#
  for( l in 1:3) {#
    lines(x=xi.bar[l]+delta/2* c(-1,1), y=rep(k,2) )#
  }#
}
##
#  Supporting material for "Minimax efficient random experimental designs with application to #
#	model-robust design for prediction" by T.W. Waite and D.C. Woods (2019)#
#
# Section 4: Model-robust designs#
## Section 4.3.2, first example: 4 points, 2 factors, first-order model#
source("obj-funs.R")#
source("coord-descent.R")#
#
# set up model#
f=function(x) { c(1,x[1],x[2]) }#
A=diag(c(4,4/3,4/3))#
#
# set up discretized translation set (for objective function evaluation)#
library(lhs)#
Tmc <- 2*randomLHS(n=100, k=2)-1#
# try several tau2s #
#
answers <- list()#
rawdesigns <- list()#
#
tau2s <- c(0.01,0.05,0.1, 0.25)#
xi <- 0.8*(randomLHS(n=4, k=2)-0.5)#
xi <- matrix(runif(8, min=-0.8, max=0.8),ncol=2,nrow=4)#
#
# find optimal strategies#
#
# loop over tau2 values#
for(k in 1:length(tau2s) ) {#
  tmp <- NULL#
  answers[[k]] <- NULL#
  # multiple random starts - keep best so far#
  for (m in 1:20) {#
    xi <- 0.8*(randomLHS(n=4, k=2)-0.5)#
    tmp <- coord.descent(c(xi,1 ), Psi.approx.wrap, lower=rep(c(-1, 0 ), c(8, 1)), upper=rep(c(1,1),c(8,1)),  #
                               n=4, q=2, Tmc=Tmc, f=f, A=A, sigma2.UB=1, Tmax=Tmc, tau2=tau2s[k], tol=1e-6 )#
    if (length(answers)<k) { #
      answers[[k]] <- tmp #
    } else if (min(tmp$ofvals)<min(answers[[k]]$ofvals)) { #
      answers[[k]] <- tmp#
    }#
  }#
  rawdesigns[[k]] <- design.raw(answers[[k]]$xcurr, n=4, q=2)#
}#
#
# plot the strategies#
par(mfrow=c(2,2))#
for (k in 1:4) {#
  xi.bar <- rawdesigns[[k]]$xi.bar#
  delta <- rawdesigns[[k]]$delta#
  plot(xi.bar, xlim=c(-1,1), ylim=c(-1,1), pch=19, xlab=expression(x[1]), ylab=expression(x[2]), main=substitute(tau^2 /bar(sigma)^2==val , list(val=tau2s[k])))#
  for (l in 1:4) {#
    polygon(matrix(xi.bar[l,], ncol=2,nrow=4, byrow=T) + delta/2 *matrix(c(-1,-1, -1,1, 1,1, 1,-1),ncol=2, byrow=T) )#
  }#
}#
#
# save(tau2s,answers,rawdesigns, file="out.Rdata")
answers
rawdesigns
source("obj-funs.R")#
source("coord-descent.R")#
#
f <- function(x) { c(1,x[1],x[2],x[3], x[2]*x[3], x[1]*x[3], x[1]*x[2], x[1]^2, x[2]^2, x[3]^2)}#
#
A <- matrix(0, ncol=10, nrow=10)#
#
indxs <- matrix( c(0,0,0,#
                   1,0,0,#
                   0,1,0,#
                   0,0,1,#
                   0,1,1,#
                   1,0,1,#
                   1,1,0,#
                   2,0,0,#
                   0,2,0,#
                   0,0,2), ncol=3, nrow=10, byrow=T)#
#
INT <- function(idx) { 2/(idx+1) * ( (idx+1) %% 2 == 1) }#
#
for (i in 1:10) {#
  for (j in 1:10) {#
    A[i,j] <- prod( sapply(indxs[i,] + indxs[j,], INT) )#
  }#
}#
#
library(MASS); fractions(A)#
#
#####
##
# V-optimal deterministic design #
##
##
#
library(lhs)#
init <- c(2*randomLHS(n=12,k=3)-1)#
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178, worth trying several repeats#
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))#
des <- round(des,digits=3) #
des <- des[do.call(order,des),]#
plot(des)#
xtable((des),digits=3)
source("obj-funs.R")#
source("coord-descent.R")#
#
f <- function(x) { c(1,x[1],x[2],x[3], x[2]*x[3], x[1]*x[3], x[1]*x[2], x[1]^2, x[2]^2, x[3]^2)}#
#
A <- matrix(0, ncol=10, nrow=10)#
#
indxs <- matrix( c(0,0,0,#
                   1,0,0,#
                   0,1,0,#
                   0,0,1,#
                   0,1,1,#
                   1,0,1,#
                   1,1,0,#
                   2,0,0,#
                   0,2,0,#
                   0,0,2), ncol=3, nrow=10, byrow=T)#
#
INT <- function(idx) { 2/(idx+1) * ( (idx+1) %% 2 == 1) }#
#
for (i in 1:10) {#
  for (j in 1:10) {#
    A[i,j] <- prod( sapply(indxs[i,] + indxs[j,], INT) )#
  }#
}#
#
library(MASS); fractions(A)#
#
#####
##
# V-optimal deterministic design #
##
##
#
library(lhs)#
init <- c(2*randomLHS(n=12,k=3)-1)#
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178, worth trying several repeats#
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))#
des <- round(des,digits=3) #
des <- des[do.call(order,des),]#
plot(des)
des
library(lhs)#
init <- c(2*randomLHS(n=12,k=3)-1)#
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178, worth trying several repeats#
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))#
des <- round(des,digits=3) #
des <- des[do.call(order,des),]#
plot(des)
des
library(lhs)#
init <- c(2*randomLHS(n=12,k=3)-1)#
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178, worth trying several repeats#
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))#
des <- round(des,digits=3) #
des <- des[do.call(order,des),]#
plot(des)
des
clip <- function(x, delta=0.1) {#
  x <- as.matrix(x)#
  x<-  pmin(  x, 1-delta/2 )#
  x <- pmax( x, -1+delta/2)#
  return(x)#
}#
#
# #
heur.des <- function(delta) {#
  xi <- as.matrix(des)#
  xi <- clip(xi, delta)  #
  xi[6,] <- xi[6,] + c(-delta/2,0,0)#
  xi[7,] <- xi[7, ] + c(delta/2,0,0)#
  return(xi)#
}#
Tmc <- 2*randomLHS(n=50, k=3)-1 -> Tmax#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
optH
##
#  Supporting material for "Minimax efficient random experimental designs with application to #
#	model-robust design for prediction" by T.W. Waite and D.C. Woods (2019)#
#
# Section 4: Model-robust designs#
## Section 4.3.3, 12 points, 3 factors, quadratic model#
#
source("obj-funs.R")#
source("coord-descent.R")#
#
f <- function(x) { c(1,x[1],x[2],x[3], x[2]*x[3], x[1]*x[3], x[1]*x[2], x[1]^2, x[2]^2, x[3]^2)}#
#
A <- matrix(0, ncol=10, nrow=10)#
#
indxs <- matrix( c(0,0,0,#
                   1,0,0,#
                   0,1,0,#
                   0,0,1,#
                   0,1,1,#
                   1,0,1,#
                   1,1,0,#
                   2,0,0,#
                   0,2,0,#
                   0,0,2), ncol=3, nrow=10, byrow=T)#
#
INT <- function(idx) { 2/(idx+1) * ( (idx+1) %% 2 == 1) }#
#
for (i in 1:10) {#
  for (j in 1:10) {#
    A[i,j] <- prod( sapply(indxs[i,] + indxs[j,], INT) )#
  }#
}#
#
library(MASS); fractions(A)#
#
#####
##
# V-optimal deterministic design #
##
##
#
library(lhs)#
init <- c(2*randomLHS(n=12,k=3)-1)#
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178, worth trying several repeats#
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))#
des <- round(des,digits=3) #
des <- des[do.call(order,des),]#
plot(des)#
#xtable((des),digits=3)  #
#
##
# Set up heuristic xi.bar as described in text #
# - N.B. - first check that points 6 & 7 of des are replicates#
##
#
clip <- function(x, delta=0.1) {#
  x <- as.matrix(x)#
  x<-  pmin(  x, 1-delta/2 )#
  x <- pmax( x, -1+delta/2)#
  return(x)#
}#
#
# #
heur.des <- function(delta) {#
  xi <- as.matrix(des)#
  xi <- clip(xi, delta)  #
  xi[6,] <- xi[6,] + c(-delta/2,0,0)#
  xi[7,] <- xi[7, ] + c(delta/2,0,0)#
  return(xi)#
}#
Tmc <- 2*randomLHS(n=50, k=3)-1 -> Tmax#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
optH
source("obj-funs.R")#
source("coord-descent.R")#
#
f <- function(x) { c(1,x[1],x[2],x[3], x[2]*x[3], x[1]*x[3], x[1]*x[2], x[1]^2, x[2]^2, x[3]^2)}#
#
A <- matrix(0, ncol=10, nrow=10)#
#
indxs <- matrix( c(0,0,0,#
                   1,0,0,#
                   0,1,0,#
                   0,0,1,#
                   0,1,1,#
                   1,0,1,#
                   1,1,0,#
                   2,0,0,#
                   0,2,0,#
                   0,0,2), ncol=3, nrow=10, byrow=T)#
#
INT <- function(idx) { 2/(idx+1) * ( (idx+1) %% 2 == 1) }#
#
for (i in 1:10) {#
  for (j in 1:10) {#
    A[i,j] <- prod( sapply(indxs[i,] + indxs[j,], INT) )#
  }#
}#
#
library(MASS); fractions(A)#
#
#####
##
# V-optimal deterministic design #
##
##
#
library(lhs)#
init <- c(2*randomLHS(n=12,k=3)-1)#
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178, worth trying several repeats#
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))#
des <- round(des,digits=3) #
des <- des[do.call(order,des),]#
plot(des)
des
library(lhs)#
init <- c(2*randomLHS(n=12,k=3)-1)#
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178, worth trying several repeats#
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))#
des <- round(des,digits=3) #
des <- des[do.call(order,des),]#
plot(des)
clip <- function(x, delta=0.1) {#
  x <- as.matrix(x)#
  x<-  pmin(  x, 1-delta/2 )#
  x <- pmax( x, -1+delta/2)#
  return(x)#
}#
#
# #
heur.des <- function(delta) {#
  xi <- as.matrix(des)#
  xi <- clip(xi, delta)  #
  xi[6,] <- xi[6,] + c(-delta/2,0,0)#
  xi[7,] <- xi[7, ] + c(delta/2,0,0)#
  return(xi)#
}#
Tmc <- 2*randomLHS(n=50, k=3)-1 -> Tmax#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))#
optH
Tmc <- 2*randomLHS(n=50, k=3)-1 -> Tmax#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))#
optH
Tmc <- 2*randomLHS(n=100, k=3)-1 -> Tmax#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))#
optH
Tmc <- 2*randomLHS(n=500, k=3)-1 -> Tmax#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))#
optH
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)
optH
Tmc <- 2*randomLHS(n=500, k=3)-1 -> Tmax#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
optH
Tmc <- 2*randomLHS(n=1000, k=3)-1 -> Tmax#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
optH
Tmc <- 2*randomLHS(n=1000, k=3)-1 -> Tmax#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
optH#
#plot(Vectorize(PsiH), from=
Tmc <- 2*randomLHS(n=1000, k=3)-1 -> Tmax#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
optH
PsiH(0.268)
Tmc <- 2*randomLHS(n=1000, k=3)-1 -> Tmax
PsiH(0.268)
Tmc <- 2*randomLHS(n=1000, k=3)-1 -> Tmax; PsiH(0.268)
Tmc <- 2*randomLHS(n=100, k=3)-1 #
Tmax <- 2*randomLHS(n=500,k=3)-1
Tmc <- 2*randomLHS(n=1000, k=3)-1 -> Tmax; PsiH(0.268)
Tmc <- 2*randomLHS(n=50, k=3)-1 ;#
Tmax <- 2*randomLHS(n=50,k=3)-1; PsiH(0.268)
Tmc <- 2*randomLHS(n=500, k=3)-1 ;#
Tmax <- 2*randomLHS(n=50,k=3)-1; PsiH(0.268)
Tmc <- 2*randomLHS(n=500, k=3)-1 ;#
Tmax <- 2*randomLHS(n=1000,k=3)-1; PsiH(0.268)
Tmc <- 2*randomLHS(n=500, k=3)-1 ;#
Tmax <- 2*randomLHS(n=10000,k=3)-1; PsiH(0.268)
Tmc <- 2*randomLHS(n=500, k=3)-1 ;#
Tmax <- 2*randomLHS(n=10,k=3)-1; PsiH(0.268)
Tmc <- 2*randomLHS(n=1000, k=3)-1 ;#
Tmax <- 2*randomLHS(n=10,k=3)-1; PsiH(0.268)
Tmc <- 2*randomLHS(n=500, k=3)-1 #
Tmax <- 2*randomLHS(n=50,k=3)-1
Tmc <- 2*randomLHS(n=100, k=3)-1 #
Tmax <- 2*randomLHS(n=100,k=3)-1
Tmc <- 2*randomLHS(n=200, k=3)-1 #
Tmax <- 2*randomLHS(n=200,k=3)-1#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
optH
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
optH
Tmc <- 2*randomLHS(n=200, k=3)-1 #
Tmax <- 2*randomLHS(n=200,k=3)-1#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
optH
Tmc <- 2*randomLHS(n=1000, k=3)-1 #
Tmax <- 2*randomLHS(n=1000,k=3)-1#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
optH
Tmc <- 2*randomLHS(n=100, k=3)-1 #
Tmax <- 2*randomLHS(n=100,k=3)-1#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
optH
Tmc <- 2*randomLHS(n=100, k=3)-1 #
Tmax <- 2*randomLHS(n=100,k=3)-1#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
optH#
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), #ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
##
#  Supporting material for "Minimax efficient random experimental designs with application to #
#	model-robust design for prediction" by T.W. Waite and D.C. Woods (2019)#
#
# Section 4: Model-robust designs#
## Section 4.3.2, first example: 3 points, 1 factors, quadratic model#
#
source("obj-funs.R")#
source("coord-descent.R")#
# set up model#
f=function(x) { c(1,x,x^2) }#
A=diag(c(4,4/3,4/5)); A[1,3] <- 4/3 -> A[3,1]#
#
# set up discretized translation set (for objective function evaluation)#
library(lhs)#
Tmc <- 2*randomLHS(n=50, k=1)-1#
#
# set up initial mean-design#
xi <- 0.8*(randomLHS(n=3, k=1)-0.5)#
#
tau2=2*1*0.01^2#
#
ans <- coord.descent(c(xi,1 ), Psi.approx.wrap, lower=rep(c(-1, 0 ), c(3, 1)), upper=rep(c(1,1),c(3,1)),  #
                     n=3, q=1, Tmc=Tmc, f=f, A=A, sigma2.UB=1, Tmax=Tmc, tau2=tau2, tol=1e-4 )#
#
plot(ans$xcurr[1:3], rep(0,3))#
# try several values of tau^2#
#
# compute optimal strategies#
tau2s <- 2*1* c(0.01, 0.05, 0.10, 0.25, 0.5, 1)^2#
answers <- list()#
rawdesigns <- list()#
for (k in 1:length(tau2s)) {#
  answers[[k]] <- coord.descent(c(xi,1 ), Psi.approx.wrap, lower=rep(c(-1, 0 ), c(3, 1)), upper=rep(c(1,1),c(3,1)),  #
                                n=3, q=1, Tmc=Tmc, f=f, A=A, sigma2.UB=1, Tmax=Tmc, tau2=tau2s[k], tol=1e-4 )#
  rawdesigns[[k]] <- design.raw(answers[[k]]$xcurr, n=3, q=1, transform.delta=T)#
}#
# plot the strategies#
plot(NULL, xlim=c(-1,1), ylim=c(1,5) ,ylab=expression(tau^2/bar(sigma)^2), xlab=expression(x),yaxt='n')#
axis(2, at=1:5, labels=tau2s[1:5])#
for( k in 1:length(tau2s)) {#
  xi.bar <- rawdesigns[[k]]$xi.bar#
  delta <- rawdesigns[[k]]$delta#
  points(x=xi.bar, y=rep(k,3), pch=19)#
  for( l in 1:3) {#
    lines(x=xi.bar[l]+delta/2* c(-1,1), y=rep(k,2) )#
  }#
}
answers
rawdesigns
##
#  Supporting material for "Minimax efficient random experimental designs with application to #
#	model-robust design for prediction" by T.W. Waite and D.C. Woods (2019)#
#
# Section 4: Model-robust designs#
## Section 4.3.2, first example: 3 points, 1 factors, quadratic model#
#
source("obj-funs.R")#
source("coord-descent.R")#
# set up model#
f=function(x) { c(1,x,x^2) }#
A=diag(c(4,4/3,4/5)); A[1,3] <- 4/3 -> A[3,1]#
#
# set up discretized translation set (for objective function evaluation)#
library(lhs)#
Tmc <- 2*randomLHS(n=50, k=1)-1#
#
# set up initial mean-design#
xi <- 0.8*(randomLHS(n=3, k=1)-0.5)#
#
tau2=2*1*0.01^2#
#
ans <- coord.descent(c(xi,1 ), Psi.approx.wrap, lower=rep(c(-1, 0 ), c(3, 1)), upper=rep(c(1,1),c(3,1)),  #
                     n=3, q=1, Tmc=Tmc, f=f, A=A, sigma2.UB=1, Tmax=Tmc, tau2=tau2, tol=1e-4 )#
#
plot(ans$xcurr[1:3], rep(0,3))#
# try several values of tau^2#
#
# compute optimal strategies#
tau2s <- 2*1* c(0.01, 0.05, 0.10, 0.25, 0.5, 1)^2#
answers <- list()#
rawdesigns <- list()#
for (k in 1:length(tau2s)) {#
  answers[[k]] <- coord.descent(c(xi,1 ), Psi.approx.wrap, lower=rep(c(-1, 0 ), c(3, 1)), upper=rep(c(1,1),c(3,1)),  #
                                n=3, q=1, Tmc=Tmc, f=f, A=A, sigma2.UB=1, Tmax=Tmc, tau2=tau2s[k], tol=1e-4 )#
  rawdesigns[[k]] <- design.raw(answers[[k]]$xcurr, n=3, q=1, transform.delta=T)#
}#
# plot the strategies#
plot(NULL, xlim=c(-1,1), ylim=c(1,5) ,ylab=expression(tau^2/bar(sigma)^2), xlab=expression(x),yaxt='n')#
axis(2, at=1:5, labels=tau2s[1:5])#
for( k in 1:length(tau2s)) {#
  xi.bar <- rawdesigns[[k]]$xi.bar#
  delta <- rawdesigns[[k]]$delta#
  points(x=xi.bar, y=rep(k,3), pch=19)#
  for( l in 1:3) {#
    lines(x=xi.bar[l]+delta/2* c(-1,1), y=rep(k,2) )#
  }#
}#
#
answers#
rawdesigns
##
#  Supporting material for "Minimax efficient random experimental designs with application to #
#	model-robust design for prediction" by T.W. Waite and D.C. Woods (2019)#
#
# Section 4: Model-robust designs#
## Section 4.3.2, first example: 3 points, 1 factors, quadratic model#
#
source("obj-funs.R")#
source("coord-descent.R")#
# set up model#
f=function(x) { c(1,x,x^2) }#
A=diag(c(4,4/3,4/5)); A[1,3] <- 4/3 -> A[3,1]#
#
# set up discretized translation set (for objective function evaluation)#
library(lhs)#
Tmc <- 2*randomLHS(n=10, k=1)-1#
#
# set up initial mean-design#
xi <- 0.8*(randomLHS(n=3, k=1)-0.5)#
#
tau2=2*1*0.01^2#
#
ans <- coord.descent(c(xi,1 ), Psi.approx.wrap, lower=rep(c(-1, 0 ), c(3, 1)), upper=rep(c(1,1),c(3,1)),  #
                     n=3, q=1, Tmc=Tmc, f=f, A=A, sigma2.UB=1, Tmax=Tmc, tau2=tau2, tol=1e-4 )#
#
plot(ans$xcurr[1:3], rep(0,3))#
# try several values of tau^2#
#
# compute optimal strategies#
tau2s <- 2*1* c(0.01, 0.05, 0.10, 0.25, 0.5, 1)^2#
answers <- list()#
rawdesigns <- list()#
for (k in 1:length(tau2s)) {#
  answers[[k]] <- coord.descent(c(xi,1 ), Psi.approx.wrap, lower=rep(c(-1, 0 ), c(3, 1)), upper=rep(c(1,1),c(3,1)),  #
                                n=3, q=1, Tmc=Tmc, f=f, A=A, sigma2.UB=1, Tmax=Tmc, tau2=tau2s[k], tol=1e-4 )#
  rawdesigns[[k]] <- design.raw(answers[[k]]$xcurr, n=3, q=1, transform.delta=T)#
}#
# plot the strategies#
plot(NULL, xlim=c(-1,1), ylim=c(1,5) ,ylab=expression(tau^2/bar(sigma)^2), xlab=expression(x),yaxt='n')#
axis(2, at=1:5, labels=tau2s[1:5])#
for( k in 1:length(tau2s)) {#
  xi.bar <- rawdesigns[[k]]$xi.bar#
  delta <- rawdesigns[[k]]$delta#
  points(x=xi.bar, y=rep(k,3), pch=19)#
  for( l in 1:3) {#
    lines(x=xi.bar[l]+delta/2* c(-1,1), y=rep(k,2) )#
  }#
}#
#
answers#
rawdesigns
Tmc
##
#  Supporting material for "Minimax efficient random experimental designs with application to #
#	model-robust design for prediction" by T.W. Waite and D.C. Woods (2019)#
#
# Section 4: Model-robust designs#
## Section 4.3.2, first example: 3 points, 1 factors, quadratic model#
#
source("obj-funs.R")#
source("coord-descent.R")#
# set up model#
f=function(x) { c(1,x,x^2) }#
A=diag(c(4,4/3,4/5)); A[1,3] <- 4/3 -> A[3,1]#
#
# set up discretized translation set (for objective function evaluation)#
library(lhs)#
Tmc <- 2*randomLHS(n=100, k=1)-1#
#
# set up initial mean-design#
xi <- 0.8*(randomLHS(n=3, k=1)-0.5)#
#
tau2=2*1*0.01^2#
#
ans <- coord.descent(c(xi,1 ), Psi.approx.wrap, lower=rep(c(-1, 0 ), c(3, 1)), upper=rep(c(1,1),c(3,1)),  #
                     n=3, q=1, Tmc=Tmc, f=f, A=A, sigma2.UB=1, Tmax=Tmc, tau2=tau2, tol=1e-4 )#
#
plot(ans$xcurr[1:3], rep(0,3))#
# try several values of tau^2#
#
# compute optimal strategies#
tau2s <- 2*1* c(0.01, 0.05, 0.10, 0.25, 0.5, 1)^2#
answers <- list()#
rawdesigns <- list()#
for (k in 1:length(tau2s)) {#
  answers[[k]] <- coord.descent(c(xi,1 ), Psi.approx.wrap, lower=rep(c(-1, 0 ), c(3, 1)), upper=rep(c(1,1),c(3,1)),  #
                                n=3, q=1, Tmc=Tmc, f=f, A=A, sigma2.UB=1, Tmax=Tmc, tau2=tau2s[k], tol=1e-4 )#
  rawdesigns[[k]] <- design.raw(answers[[k]]$xcurr, n=3, q=1, transform.delta=T)#
}#
# plot the strategies#
plot(NULL, xlim=c(-1,1), ylim=c(1,5) ,ylab=expression(tau^2/bar(sigma)^2), xlab=expression(x),yaxt='n')#
axis(2, at=1:5, labels=tau2s[1:5])#
for( k in 1:length(tau2s)) {#
  xi.bar <- rawdesigns[[k]]$xi.bar#
  delta <- rawdesigns[[k]]$delta#
  points(x=xi.bar, y=rep(k,3), pch=19)#
  for( l in 1:3) {#
    lines(x=xi.bar[l]+delta/2* c(-1,1), y=rep(k,2) )#
  }#
}#
#
answers#
rawdesigns
source("obj-funs.R")#
source("coord-descent.R")#
#
f <- function(x) { c(1,x[1],x[2],x[3], x[2]*x[3], x[1]*x[3], x[1]*x[2], x[1]^2, x[2]^2, x[3]^2)}#
#
A <- matrix(0, ncol=10, nrow=10)#
#
indxs <- matrix( c(0,0,0,#
                   1,0,0,#
                   0,1,0,#
                   0,0,1,#
                   0,1,1,#
                   1,0,1,#
                   1,1,0,#
                   2,0,0,#
                   0,2,0,#
                   0,0,2), ncol=3, nrow=10, byrow=T)#
#
INT <- function(idx) { 2/(idx+1) * ( (idx+1) %% 2 == 1) }#
#
for (i in 1:10) {#
  for (j in 1:10) {#
    A[i,j] <- prod( sapply(indxs[i,] + indxs[j,], INT) )#
  }#
}#
#
library(MASS); fractions(A)#
#
#####
##
# V-optimal deterministic design #
##
##
#
library(lhs)#
init <- c(2*randomLHS(n=12,k=3)-1)#
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178, worth trying several repeats#
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))#
des <- round(des,digits=3) #
des <- des[do.call(order,des),]#
plot(des)#
#xtable((des),digits=3)  #
#
##
# Set up heuristic xi.bar as described in text #
# - N.B. - first check that points 6 & 7 of des are replicates#
##
#
clip <- function(x, delta=0.1) {#
  x <- as.matrix(x)#
  x<-  pmin(  x, 1-delta/2 )#
  x <- pmax( x, -1+delta/2)#
  return(x)#
}#
#
# #
heur.des <- function(delta) {#
  xi <- as.matrix(des)#
  xi <- clip(xi, delta)  #
  xi[6,] <- xi[6,] + c(-delta/2,0,0)#
  xi[7,] <- xi[7, ] + c(delta/2,0,0)#
  return(xi)#
}#
Tmc <- 2*randomLHS(n=100, k=3)-1 #
Tmax <- 2*randomLHS(n=100,k=3)-1#
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd#
#
##
# Risk bound for heuristic strategy, as a function of delta#
# - optimize delta and plot the risk bound#
##
#
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) } #
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)  #
optH
