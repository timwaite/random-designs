ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
plot(des)
xtable((des),digits=3)
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
plot(des)
xtable((des),digits=3)
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
plot(des)
xtable((des),digits=3)
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
plot(des)
xtable((des),digits=3)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
plot(des)
xtable((des),digits=3)
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
plot(des)
xtable((des),digits=3)
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
plot(des)
xtable((des),digits=3)
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
plot(des)
xtable((des),digits=3)
#
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
plot(des)
xtable((des),digits=3)
clip <- function(x, delta=0.1) {
x <- as.matrix(x)
x<-  pmin(  x, 1-delta/2 )
x <- pmax( x, -1+delta/2)
return(x)
}
# check that points 6 & 7 are replicates
heur.des <- function(delta) {
xi <- as.matrix(des)
xi <- clip(xi, delta)
xi[6,] <- xi[6,] + c(-delta/2,0,0)
xi[7,] <- xi[7, ] + c(delta/2,0,0)
return(xi)
}
heur.des(0.1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
plot(des)
xtable((des),digits=3)
init <- c(2*randomLHS(n=12,k=3)-1)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
plot(des)
xtable((des),digits=3)
ans <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178
des <- data.frame(matrix(ans$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
plot(des)
xtable((des),digits=3)
clip <- function(x, delta=0.1) {
x <- as.matrix(x)
x<-  pmin(  x, 1-delta/2 )
x <- pmax( x, -1+delta/2)
return(x)
}
# check that points 6 & 7 are replicates
heur.des <- function(delta) {
xi <- as.matrix(des)
xi <- clip(xi, delta)
xi[6,] <- xi[6,] + c(-delta/2,0,0)
xi[7,] <- xi[7, ] + c(delta/2,0,0)
return(xi)
}
heur.des(0.1)
Tmc <- 2*randomLHS(n=50, k=3)-1 -> Tmax
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) }
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
pairs(heur.des(optH$minimum), xlim=c(-1,1),ylim=c(-1,1))
sqrt( optH$objective/ min( ans$ofvals) ) # how much bigger is the RMISPE due to presence of discrepancy?
Psi.approx(xi.bar = heur.des(optH$minimum), delta=optH$minimum, Tmc=Tmc, f=f, A=A, sigma2.UB=1, Tmax=Tmc, tau2=tau2)
optH$objective
plot( Vectorize(function(u) { min(1, optH$objective/u ) }), from=0,to=10)
plot( Vectorize(function(u) { min(1, optH$objective/u ) }), from=0,to=10, ylim=c(0,1))
plot( Vectorize(function(u) { min(1, optH$objective/u ) }), from=0,to=20, ylim=c(0,1))
plot( Vectorize(function(u) { min(1, optH$objective/u ) }), from=0,to=25, ylim=c(0,1))
plot( Vectorize(function(u) { min(1, optH$objective/u ) }), from=0,to=25, ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="")
abline(h=1,lty=2)
abline(h=1,col="grey")
plot( Vectorize(function(u) { min(1, optH$objective/u ) }), from=0,to=25, ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="",lwd=2)
abline(h=1,col="grey",lwd=2)
par(mfrow=c(1,1))
plot( Vectorize(function(u) { min(1, optH$objective/u ) }), from=0,to=25, ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="",lwd=2)
abline(h=1,col="grey",lwd=2)
par(mfrow=c(1,1))
plot(NULL, from=0,to=25, ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="",lwd=2)
abline(h=1,col="grey",lwd=2)
curve( Vectorize(function(u) { min(1, optH$objective/u ) }),from=0,to=25 )
par(mfrow=c(1,1))
plot(NULL, from=0,to=25, ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="",lwd=2)
abline(h=1,col="grey",lwd=2)
plot( Vectorize(function(u) { min(1, optH$objective/u ) }),from=0,to=25 , add=TRUE)
plot(NULL,xlim=c(0,25), ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="",lwd=2)
abline(h=1,col="grey",lwd=2)
plot( Vectorize(function(u) { min(1, optH$objective/u ) }),from=0,to=25 , add=TRUE)
par(mfrow=c(1,1))
plot(NULL,xlim=c(0,25), ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="",lwd=2)
abline(h=1,col="grey",lwd=2, xlim=c(0,25))
plot( Vectorize(function(u) { min(1, optH$objective/u ) }),from=0,to=25 , add=TRUE)
par(mfrow=c(1,1))
plot(NULL,xlim=c(0,25), ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="",lwd=2)
lines(seq(from=0,to=25,len=2), c(1,1), col="grey", lwd=2)
plot( Vectorize(function(u) { min(1, optH$objective/u ) }),from=0,to=25 , add=TRUE)
par(mfrow=c(1,1))
plot(NULL,xlim=c(0,25), ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="",lwd=2)
lines(seq(from=0,to=25,len=2), c(1,1), col="grey", lwd=2)
bound <- function(u) { min(1, optH$objective/u ) }
us <- seq(from=0,to=25,len=100)
lines(us, sapply(us,bound), lwd=2)
par(mfrow=c(1,1))
plot(NULL,xlim=c(0,25), ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="",lwd=2)
lines(seq(from=0,to=25,len=2), c(1,1), col="grey", lwd=2)
bound <- function(u) { min(1, optH$objective/u ) }
us <- seq(from=0,to=25,len=100)
lines(us, sapply(us,bound), lwd=2)
par(mfrow=c(1,1))
plot(NULL,xlim=c(0,25), ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="",lwd=2)
lines(seq(from=0,to=25,len=2), c(1,1), col="grey", lwd=2)
bound <- function(u) { min(1, optH$objective/u ) }
us <- seq(from=0,to=25,len=100)
lines(us, sapply(us,bound), lwd=2)
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
pairs(heur.des(optH$minimum), xlim=c(-1,1),ylim=c(-1,1))
pairs(heur.des(optH$minimum), xlim=c(-1,1),ylim=c(-1,1), pch=19)
plot(heur.des(optH$minimum)[,c(1,2)],xlim=c(-1,1),ylim=c(-1,1), pch=19, xlab=expression(x[1]), ylab=expression(x[2]))
abline(h=c(-1,1),v=c(-1,1),lty=2)
boxplot(Veffs, xlab="V-efficiency distribution", ylim=c(0,1))
Veffs <- NULL
for (l in 1:1000) {
xi <-  heur.des(optH$minimum) + runif(2, max=optH$minimum/2)
Veffs[l] <- tr(solve(M(heur.des(0),f),A))/tr(solve(M(xi,f), A))
}
summary(Veffs)
boxplot(Veffs, xlab="V-efficiency distribution", ylim=c(0,1))
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta), cex=2)
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta), cex.axis=2)
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
abline(v=optH$minimum,lty=2)
plot(heur.des(optH$minimum)[,c(1,2)],xlim=c(-1,1),ylim=c(-1,1), pch=19, xlab=expression(x[1]), ylab=expression(x[2]))
abline(h=c(-1,1),v=c(-1,1),lty=2)
boxplot(Veffs, xlab="V-efficiency distribution", ylim=c(0,1))
plot(NULL,xlim=c(0,25), ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="",lwd=2)
lines(seq(from=0,to=25,len=2), c(1,1), col="grey", lwd=2)
bound <- function(u) { min(1, optH$objective/u ) }
us <- seq(from=0,to=25,len=100)
lines(us, sapply(us,bound), lwd=2)
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
abline(v=optH$minimum,lty=2)
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
abline(v=optH$minimum,lty=2)
load("~/Dropbox (Personal)/Random designs/code_neat/Section4_RT/mar3-2019-2factor-4run-linear.Rdata")
ls()
rawdesigns
6.84/7.03
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) }
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)
optH
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
#
source("obj-funs.R")
source("coord-descent.R")
source("optimize-RTD.R")
f <- function(x) { c(1,x[1],x[2],x[3], x[2]*x[3], x[1]*x[3], x[1]*x[2], x[1]^2, x[2]^2, x[3]^2)}
#
# Caclulate A matrix
#
A <- matrix(0, ncol=10, nrow=10)
indxs <- matrix( c(0,0,0,
1,0,0,
0,1,0,
0,0,1,
0,1,1,
1,0,1,
1,1,0,
2,0,0,
0,2,0,
0,0,2), ncol=3, nrow=10, byrow=T)
source("obj-funs.R")
source("coord-descent.R")
source("optimize-RTD.R")
f <- function(x) { c(1,x[1],x[2],x[3], x[2]*x[3], x[1]*x[3], x[1]*x[2], x[1]^2, x[2]^2, x[3]^2)}
#
# Caclulate A matrix
#
A <- matrix(0, ncol=10, nrow=10)
indxs <- matrix( c(0,0,0,
1,0,0,
0,1,0,
0,0,1,
0,1,1,
1,0,1,
1,1,0,
2,0,0,
0,2,0,
0,0,2), ncol=3, nrow=10, byrow=T)
INT <- function(idx) { 2/(idx+1) * ( (idx+1) %% 2 == 1) }
for (i in 1:10) {
for (j in 1:10) {
A[i,j] <- prod( sapply(indxs[i,] + indxs[j,], INT) )
}
}
library(MASS); fractions(A)
#
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ansV <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178, worth trying several repeats
des <- data.frame(matrix(ansV$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
setwd("~/Dropbox (Personal)/Random designs/code_neat/Section4_RT")
source("obj-funs.R")
source("coord-descent.R")
source("optimize-RTD.R")
f <- function(x) { c(1,x[1],x[2],x[3], x[2]*x[3], x[1]*x[3], x[1]*x[2], x[1]^2, x[2]^2, x[3]^2)}
#
# Caclulate A matrix
#
A <- matrix(0, ncol=10, nrow=10)
indxs <- matrix( c(0,0,0,
1,0,0,
0,1,0,
0,0,1,
0,1,1,
1,0,1,
1,1,0,
2,0,0,
0,2,0,
0,0,2), ncol=3, nrow=10, byrow=T)
INT <- function(idx) { 2/(idx+1) * ( (idx+1) %% 2 == 1) }
for (i in 1:10) {
for (j in 1:10) {
A[i,j] <- prod( sapply(indxs[i,] + indxs[j,], INT) )
}
}
library(MASS); fractions(A)
tau2=2^3*1*0.05^2
tau2
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ansV <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178, worth trying several repeats
des <- data.frame(matrix(ansV$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
des
library(lhs)
init <- c(2*randomLHS(n=12,k=3)-1)
ansV <- coord.descent(init, Vobfun, f=f, n=12, q=3, A=A)   # best value 3.9178, worth trying several repeats
des <- data.frame(matrix(ansV$xcurr,nrow=12,ncol=3))
des <- round(des,digits=3)
des <- des[do.call(order,des),]
des
clip <- function(x, delta=0.1) {
x <- as.matrix(x)
x<-  pmin(  x, 1-delta/2 )
x <- pmax( x, -1+delta/2)
return(x)
}
#
heur.des <- function(delta) {
xi <- as.matrix(des)
xi <- clip(xi, delta)
xi[6,] <- xi[6,] + c(-delta/2,0,0)
xi[7,] <- xi[7, ] + c(delta/2,0,0)
return(xi)
}
Tmc <- 2*randomLHS(n=100, k=3)-1
Tmax <- rbind( 2*randomLHS(50,3)-1, as.matrix( expand.grid(c(-1,1), c(-1,1),c(-1,1)) ) )
# NB inclusion of the corner points in Tmax stabilizes the results as the worst t is usually at one of these points
tau2=2^3*1*0.05^2 # sd of psi at randomly selected point is 5% that of the random error sd
PsiH <- function(delta) { Psi.approx( xi.bar=heur.des(delta), delta, Tmc, f, A, sigma2.UB=1, Tmax, tau2=tau2 ) }
optH <- optimize(Vectorize(PsiH), lower=0.05, upper=0.5)
optH
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
#
par(mfrow=c(1,1))
plot(NULL,xlim=c(0,25), ylim=c(0,1), xlab=expression(u/bar(sigma)^2), ylab="",lwd=2)
lines(seq(from=0,to=25,len=2), c(1,1), col="grey", lwd=2)
bound <- function(u) { min(1, optH$objective/u ) }
us <- seq(from=0,to=25,len=100)
lines(us, sapply(us,bound), lwd=2)
Veffs <- NULL
for (l in 1:1000) {
xi <-  heur.des(optH$minimum) + runif(2, max=optH$minimum/2)
Veffs[l] <- tr(solve(M(heur.des(0),f),A))/tr(solve(M(xi,f), A))
}
summary(Veffs)
par(mfrow=c(1,3))
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
abline(v=optH$minimum,lty=2)
plot(heur.des(optH$minimum)[,c(1,2)],xlim=c(-1,1),ylim=c(-1,1), pch=19, xlab=expression(x[1]), ylab=expression(x[2]))
abline(h=c(-1,1),v=c(-1,1),lty=2)
boxplot(Veffs, xlab="V-efficiency distribution", ylim=c(0,1))
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
abline(v=optH$minimum,lty=2)
par(mfrow=c(1,1))
plot(Vectorize(PsiH), from=0.01,to=0.5,type="l", ylim=c(0,5*optH$objective),xlim=c(0,0.5), ylab=expression(hat(Psi)(bar(xi)[delta],delta)), xlab=expression(delta))
abline(v=optH$minimum,lty=2)
boxplot(Veffs, xlab="V-efficiency distribution", ylim=c(0,1))
#
#  Supporting material for "Minimax efficient random experimental designs with application to
#	model-robust design for prediction" by T.W. Waite and D.C. Woods (2019)
# Section 4: Model-robust designs
## Section 4.3.2, first example: 3 points, 1 factors, quadratic model
source("obj-funs.R")
source("coord-descent.R")
source("optimize-RTD.R")
# set up model
f=function(x) { c(1,x,x^2) }
A=diag(c(4,4/3,4/5)); A[1,3] <- 4/3 -> A[3,1]
# try several values of tau^2
# compute optimal strategies
# -- N.B. takes several minutes
tau2s <- c(0.01, 0.05, 0.10, 0.25, 0.5)^2
answers <- list()
rawdesigns <- list()
for (k in 1:length(tau2s)) {
cat("tau2 = ",tau2s[k],"\n")
answers[[k]] <- optimize.RTD(f=f, A=A, n=3, q=1, tau2=tau2s[k], sigma2.UB=1, random.starts=5, verbose=T)
}
#
#  Supporting material for "Minimax efficient random experimental designs with application to
#	model-robust design for prediction" by T.W. Waite and D.C. Woods (2019)
# Section 4: Model-robust designs
## Section 4.3.2, first example: 3 points, 1 factors, quadratic model
source("obj-funs.R")
source("coord-descent.R")
source("optimize-RTD.R")
# set up model
f=function(x) { c(1,x,x^2) }
A=diag(c(4,4/3,4/5)); A[1,3] <- 4/3 -> A[3,1]
# try several values of tau^2
# compute optimal strategies
# -- N.B. takes several minutes
tau2s <- c(0.01, 0.05, 0.10, 0.25, 0.5)
answers <- list()
rawdesigns <- list()
for (k in 1:length(tau2s)) {
cat("tau2 = ",tau2s[k],"\n")
answers[[k]] <- optimize.RTD(f=f, A=A, n=3, q=1, tau2=tau2s[k], sigma2.UB=1, random.starts=5, verbose=T)
}
# plot the strategies
plot(NULL, xlim=c(-1,1), ylim=c(1,5) ,ylab=expression(tau^2/bar(sigma)^2), xlab=expression(x),yaxt='n')
axis(2, at=1:5, labels=tau2s[1:5])
for( k in 1:length(tau2s)) {
xi.bar <- answers[[k]]$xi.bar
delta <- answers[[k]]$delta
points(x=xi.bar, y=rep(k,3), pch=19)
for( l in 1:3) {
lines(x=xi.bar[l]+delta/2* c(-1,1), y=rep(k,2) )
}
}
save.image("out-1factor.Rdata")
answers
rawdesigns
source("obj-funs.R")
source("coord-descent.R")
source("optimize-RTD.R")
# set up model
f=function(x) { c(1,x[1],x[2]) }
A=diag(c(4,4/3,4/3))
# try several tau2s
answers <- list()
rawdesigns <- list()
tau2s <- c(0.01,0.05,0.1, 0.25)
# loop over tau2 values
# find optimal strategies
# -- NB takes several minutes
for(k in 1:length(tau2s) ) {
cat("\n\ntau2 = ",tau2s[k], "\n")
answers[[k]] <- optimize.RTD(f=f, A=A, n=4, q=2, tau2=tau2s[k], sigma2.UB=1, random.starts=10, verbose=T)
}
source("obj-funs.R")
source("coord-descent.R")
source("optimize-RTD.R")
# set up model
f=function(x) { c(1,x[1],x[2]) }
A=diag(c(4,4/3,4/3))
# try several tau2s
answers <- list()
rawdesigns <- list()
tau2s <- c(0.01,0.05,0.1, 0.25)
# loop over tau2 values
# find optimal strategies
# -- NB takes several minutes
for(k in 1:length(tau2s) ) {
cat("\n\ntau2 = ",tau2s[k], "\n")
answers[[k]] <- optimize.RTD(f=f, A=A, n=4, q=2, tau2=tau2s[k], sigma2.UB=1, random.starts=10, verbose=T)
}
# plot the strategies
par(mfrow=c(2,2))
for (k in 1:4) {
xi.bar <- answers[[k]]$xi.bar
delta <- answers[[k]]$delta
plot(xi.bar, xlim=c(-1,1), ylim=c(-1,1), pch=19, xlab=expression(x[1]), ylab=expression(x[2]), main=substitute(tau^2 /bar(sigma)^2==val , list(val=tau2s[k])))
for (l in 1:4) {
polygon(matrix(xi.bar[l,], ncol=2,nrow=4, byrow=T) + delta/2 *matrix(c(-1,-1, -1,1, 1,1, 1,-1),ncol=2, byrow=T) )
}
}
save(tau2s,answers,rawdesigns, file="out-2factor.Rdata")
load("~/Dropbox (Personal)/Random designs/code_neat/Section4_RT/3factor-7mar.Rdata")
load("~/Dropbox (Personal)/Random designs/code_neat/Section4_RT/1factor-7mar.Rdata")
load("~/Dropbox (Personal)/Random designs/code_neat/Section4_RT/2factor-7mar.Rdata")
load("~/Dropbox (Personal)/Random designs/code_neat/Section4_RT/1factor-7mar.Rdata")
load("~/Dropbox (Personal)/Random designs/code_neat/Section4_RT/1factor-7mar.Rdata")
save(tau2s,answers,rawdesigns,file="out-1factor.Rdata")
load("~/Dropbox (Personal)/Random designs/code_neat/Section4_RT/1factor-7mar.Rdata")
tau2s
answers
rawdesigns
load("~/Dropbox (Personal)/Random designs/code_neat/Section4_RT/2factor-7mar.Rdata")
View(answers)
answers
taus2
tau2s
rawdesigns
load("~/Dropbox (Personal)/Random designs/code_neat/Section4_RT/3factor-7mar.Rdata")
load("~/Dropbox (Personal)/Random designs/code_neat/Section4_RT/3factor-7mar.Rdata")
ans
ans2
des
save(tau2, ans, ans2, des, optH, xi.bar, delta, file="3factor-7mar.Rdata")
load("~/Dropbox (Personal)/Random designs/code_neat/Section4_RT/3factor-7mar.Rdata")
View(ans)
View(ans2)
View(des)
View(optH)
View(xi.bar)
